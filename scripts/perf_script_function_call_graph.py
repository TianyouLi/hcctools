# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-script-python Documentation for the list of available functions.

from __future__ import print_function

import os
import sys
import argparse 
import ipaddress
import debugpy as dbg

from typing import List

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
  '/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

from Core import *
from EventClass import *

from call_graph_defs import *
from html_sankey_render import *
from html_flamegraph_render import *

events = dict()

parser = argparse.ArgumentParser()
parser.add_argument("-d", "--debug",
                    help="enable debug host during script processing",
                    action="store_true",
                    dest="debug")
parser.add_argument("-l", "--debug-ip",
                    help="debuger listen ip address",
                    action="store",
                    dest="debug_ip",
                    type=ipaddress.ip_address,
                    default="127.0.0.1")
parser.add_argument("-p", "--debug-port",
                    help="debuger listen port",
                    action="store",
                    dest="debug_port",
                    type=int,
                    default="5678")
parser.add_argument("-s", "--symbol",
                    help="symbol to parse and analysis",
                    action="store",
                    dest="symbol",
                    type=str,
                    default="native_queued_spin_lock_slowpath")
parser.add_argument("-e", "--event-type",
                    help="event type to analysis",
                    action="store",
                    dest="event_type",
                    type=str,
                    default="cycles:pp")              

parser.add_argument("-g", "--graph",
                    help="generate the graph for particular function, \
                      with the file name specified, default as graph.html",
                    action="store",
                    dest="graphfilename",
                    type=str,
                    default="graph.html")

args = parser.parse_args()

def trace_begin():
  if args.debug:
    dbg.listen((str(args.debug_ip),args.debug_port))
    dbg.wait_for_client()
    dbg.breakpoint()

def get_dict_as_string(a_dict, delimiter=' '):
  return delimiter.join(['%s=%s'%(k,str(v))for k,v in sorted(a_dict.items())])
  
def trace_unhandled(event_name, context, event_fields_dict, perf_sample_dict):
  print(get_dict_as_string(event_fields_dict))
  print('Sample: {'+get_dict_as_string(perf_sample_dict['sample'], ', ')+'}')
  
def create_event_with_more_info(param_dict):
  event_attr = param_dict["attr"]
  sample     = param_dict["sample"]
  raw_buf    = param_dict["raw_buf"]
  comm       = param_dict["comm"]
  name       = param_dict["ev_name"]
  callchain  = param_dict["callchain"]

  # Symbol and dso info are not always resolved
  if ("dso" in param_dict):
    dso = param_dict["dso"]
  else:
    dso = "Unknown_dso"

  if ("symbol" in param_dict):
    symbol = param_dict["symbol"]
  else:
    symbol = "Unknown_symbol"

  # Create the event object and insert it to the right table in database
  event = create_event(name, comm, dso, symbol, event_attr)
  event.sample = sample
  event.cycles = event.sample["period"]
  event.attr = event_attr
  event.raw_buf = raw_buf
  event.callchain = callchain
  return event

graph: CallGraph = None
def create_callgraph_for_function(event, symbol: str, gtype: CallGraphType): 
  global graph
  if graph is None:
    graph = CallGraph(symbol)
  if event.symbol != symbol:
    return
  
  if gtype is CallGraphType.DIRECT:
      graph.generate_direct_call_tree(event)
  elif gtype is CallGraphType.MERGED:
      graph.generate_merged_call_tree(event)
  else:
    raise TypeError(f"{gtype} is not a valid CallGraphType") 
  

def process_event(param_dict):
  global events

  event = create_event_with_more_info(param_dict)
  if event.symbol == args.symbol and event.name == args.event_type:
    create_callgraph_for_function(event, args.symbol, CallGraphType.DIRECT)
  if event.name not in events:
    events[event.name] = {"total":event.sample["period"], "el": [event]}
  else:
    events[event.name]["total"] += event.sample["period"]
    events[event.name]["el"].append(event)

def trace_end():
  print(graph)

  graphfilename = args.graphfilename
  if not os.path.isabs(graphfilename):
      script_dir = os.path.dirname(os.path.abspath(__loader__.path))
      graphfilename = os.path.join(script_dir, graphfilename)

  render = GraphFileHtmlSankeyRender(graphfilename)
  #render = GraphFileHtmlFlameGraphRender(graphfilename)
  render.render(graph)